/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package charactercreator;

import java.awt.CardLayout;
import java.awt.Color;
import java.util.Enumeration;
import javax.swing.AbstractButton;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;

/**
 *
 * @author thom
 */
public class CharacterCreatorUI extends javax.swing.JFrame {

    //new character to be created
    private Character newCharacter;
    /**
     * Creates new form CharacterCreatorUI
     */
    public CharacterCreatorUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        raceClassPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        toStatPanelButton = new javax.swing.JButton();
        raceScrollPane = new javax.swing.JScrollPane();
        raceList = new javax.swing.JList();
        classScrollPane = new javax.swing.JScrollPane();
        classList = new javax.swing.JList();
        statPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        firstStatLabel = new javax.swing.JLabel();
        secondStatLabel = new javax.swing.JLabel();
        thirdStatLabel = new javax.swing.JLabel();
        fourthStatLabel = new javax.swing.JLabel();
        fifthStatLabel = new javax.swing.JLabel();
        sixthStatLabel = new javax.swing.JLabel();
        toAssignStatPanel = new javax.swing.JButton();
        rollStatsButton = new javax.swing.JButton();
        assignStatPanel = new javax.swing.JPanel();
        assignStat1 = new javax.swing.JLabel();
        assignStat2 = new javax.swing.JLabel();
        assignStat3 = new javax.swing.JLabel();
        assignStat4 = new javax.swing.JLabel();
        assignStat5 = new javax.swing.JLabel();
        assignStat6 = new javax.swing.JLabel();
        str1 = new javax.swing.JRadioButton();
        str2 = new javax.swing.JRadioButton();
        str3 = new javax.swing.JRadioButton();
        str4 = new javax.swing.JRadioButton();
        str5 = new javax.swing.JRadioButton();
        str6 = new javax.swing.JRadioButton();
        dex2 = new javax.swing.JRadioButton();
        dex3 = new javax.swing.JRadioButton();
        dex5 = new javax.swing.JRadioButton();
        dex4 = new javax.swing.JRadioButton();
        dex6 = new javax.swing.JRadioButton();
        dex1 = new javax.swing.JRadioButton();
        con1 = new javax.swing.JRadioButton();
        int1 = new javax.swing.JRadioButton();
        wis1 = new javax.swing.JRadioButton();
        cha5 = new javax.swing.JRadioButton();
        con2 = new javax.swing.JRadioButton();
        con3 = new javax.swing.JRadioButton();
        con4 = new javax.swing.JRadioButton();
        con5 = new javax.swing.JRadioButton();
        con6 = new javax.swing.JRadioButton();
        int2 = new javax.swing.JRadioButton();
        int3 = new javax.swing.JRadioButton();
        int4 = new javax.swing.JRadioButton();
        int5 = new javax.swing.JRadioButton();
        int6 = new javax.swing.JRadioButton();
        wis2 = new javax.swing.JRadioButton();
        wis3 = new javax.swing.JRadioButton();
        wis5 = new javax.swing.JRadioButton();
        wis4 = new javax.swing.JRadioButton();
        wis6 = new javax.swing.JRadioButton();
        cha2 = new javax.swing.JRadioButton();
        cha1 = new javax.swing.JRadioButton();
        cha3 = new javax.swing.JRadioButton();
        cha4 = new javax.swing.JRadioButton();
        cha6 = new javax.swing.JRadioButton();
        toBackgroundAlignmentPanel = new javax.swing.JButton();
        backgroundAlignmentPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        neutralGoodRadio = new javax.swing.JRadioButton();
        chaoticGoodRadio = new javax.swing.JRadioButton();
        lawfulNeutralRadio = new javax.swing.JRadioButton();
        trueNeutralRadio = new javax.swing.JRadioButton();
        chaoticNeutralRadio = new javax.swing.JRadioButton();
        lawfulEvilRadio = new javax.swing.JRadioButton();
        chaoticEvilRadio = new javax.swing.JRadioButton();
        lawfulGoodRadio = new javax.swing.JRadioButton();
        neutralEvilRadio = new javax.swing.JRadioButton();
        backgroundScrollPanel = new javax.swing.JScrollPane();
        backgroundList = new javax.swing.JList();
        toSkillsPanelButton = new javax.swing.JButton();
        skillsPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        acrobaticsCheck = new javax.swing.JCheckBox();
        arcanaCheck = new javax.swing.JCheckBox();
        historyCheck = new javax.swing.JCheckBox();
        animalHandlingCheck = new javax.swing.JCheckBox();
        athleticsCheck = new javax.swing.JCheckBox();
        deceptionCheck = new javax.swing.JCheckBox();
        insightCheck = new javax.swing.JCheckBox();
        intimidationCheck = new javax.swing.JCheckBox();
        investigationCheck = new javax.swing.JCheckBox();
        medicineCheck = new javax.swing.JCheckBox();
        natureCheck = new javax.swing.JCheckBox();
        perceptionCheck = new javax.swing.JCheckBox();
        performanceCheck = new javax.swing.JCheckBox();
        persuasionCheck = new javax.swing.JCheckBox();
        religionCheck = new javax.swing.JCheckBox();
        sleightOfHandCheck = new javax.swing.JCheckBox();
        stealthCheck = new javax.swing.JCheckBox();
        survivalCheck = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        profAmountLabel = new javax.swing.JLabel();
        toLanguagesPanel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("DnD 5th ed. Quick Character Creator");

        mainPanel.setLayout(new java.awt.CardLayout());

        startButton.setText("start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        mainPanel.add(startButton, "card2");

        jLabel2.setText("Choose your race:");

        jLabel3.setText("Choose your class:");

        toStatPanelButton.setText("next");
        toStatPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toStatPanelButtonActionPerformed(evt);
            }
        });

        raceList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Hill Dwarf", "Mountain Dwarf", "High Elf", "Wood Elf", "Dark Elf (Drow)", "Lightfoot Halfling", "Stout Halfling", "Dragonborn (Black)", "Dragonborn (Blue)", "Dragonborn (Brass)", "Dragonborn (Bronze)", "Dragonborn (Copper)", "Dragonborn (Gold)", "Dragonborn (Gold)", "Dragonborn (Green)", "Dragonborn (Red)", "Dragonborn (Silver)", "Dragonborn (White)", "Forest Gnome", "Rock Gnome", "Half-Elf", "Half-Orc", "Tiefling" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        raceScrollPane.setViewportView(raceList);

        classList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Barbarian", "Bard", "Cleric", "Druid", "Fighter", "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer", "Warlock", "Wizard" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        classScrollPane.setViewportView(classList);

        javax.swing.GroupLayout raceClassPanelLayout = new javax.swing.GroupLayout(raceClassPanel);
        raceClassPanel.setLayout(raceClassPanelLayout);
        raceClassPanelLayout.setHorizontalGroup(
            raceClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(raceClassPanelLayout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addComponent(toStatPanelButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, raceClassPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(raceClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(raceScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 234, Short.MAX_VALUE)
                .addGroup(raceClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(raceClassPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, raceClassPanelLayout.createSequentialGroup()
                        .addComponent(classScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))))
        );
        raceClassPanelLayout.setVerticalGroup(
            raceClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(raceClassPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(raceClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(raceClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(classScrollPane)
                    .addComponent(raceScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(toStatPanelButton)
                .addContainerGap())
        );

        mainPanel.add(raceClassPanel, "raceClassPanel");

        jLabel4.setText("Roll your stats:");

        firstStatLabel.setText("1st");

        secondStatLabel.setText("2nd");

        thirdStatLabel.setText("3rd");

        fourthStatLabel.setText("4th");

        fifthStatLabel.setText("5th");

        sixthStatLabel.setText("6th");

        toAssignStatPanel.setText("Next");
        toAssignStatPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toAssignStatPanelActionPerformed(evt);
            }
        });

        rollStatsButton.setText("Roll");
        rollStatsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollStatsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout statPanelLayout = new javax.swing.GroupLayout(statPanel);
        statPanel.setLayout(statPanelLayout);
        statPanelLayout.setHorizontalGroup(
            statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statPanelLayout.createSequentialGroup()
                .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statPanelLayout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(jLabel4))
                    .addGroup(statPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(rollStatsButton)
                        .addGap(85, 85, 85)
                        .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sixthStatLabel)
                            .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(secondStatLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(thirdStatLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(fourthStatLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(fifthStatLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(firstStatLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(300, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(toAssignStatPanel)
                .addGap(27, 27, 27))
        );
        statPanelLayout.setVerticalGroup(
            statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(firstStatLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(statPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(secondStatLabel)
                    .addComponent(rollStatsButton))
                .addGap(6, 6, 6)
                .addComponent(thirdStatLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fourthStatLabel)
                .addGap(19, 19, 19)
                .addComponent(fifthStatLabel)
                .addGap(18, 18, 18)
                .addComponent(sixthStatLabel)
                .addGap(18, 18, 18)
                .addComponent(toAssignStatPanel)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        mainPanel.add(statPanel, "statPanel");

        assignStat1.setText("jLabel5");

        assignStat2.setText("jLabel6");

        assignStat3.setText("jLabel7");

        assignStat4.setText("jLabel8");

        assignStat5.setText("jLabel9");

        assignStat6.setText("jLabel10");

        buttonGroup1.add(str1);
        str1.setText("Str");

        buttonGroup2.add(str2);
        str2.setText("Str");

        buttonGroup3.add(str3);
        str3.setText("Str");

        buttonGroup4.add(str4);
        str4.setText("Str");

        buttonGroup5.add(str5);
        str5.setText("Str");

        buttonGroup6.add(str6);
        str6.setText("Str");

        buttonGroup2.add(dex2);
        dex2.setText("Dex");

        buttonGroup3.add(dex3);
        dex3.setText("Dex");

        buttonGroup5.add(dex5);
        dex5.setText("Dex");

        buttonGroup4.add(dex4);
        dex4.setText("Dex");

        buttonGroup6.add(dex6);
        dex6.setText("Dex");

        buttonGroup1.add(dex1);
        dex1.setText("Dex");

        buttonGroup1.add(con1);
        con1.setText("Con");

        buttonGroup1.add(int1);
        int1.setText("Int");

        buttonGroup1.add(wis1);
        wis1.setText("Wis");

        buttonGroup5.add(cha5);
        cha5.setText("Cha");

        buttonGroup2.add(con2);
        con2.setText("Con");

        buttonGroup3.add(con3);
        con3.setText("Con");

        buttonGroup4.add(con4);
        con4.setText("Con");

        buttonGroup5.add(con5);
        con5.setText("Con");

        buttonGroup6.add(con6);
        con6.setText("Con");

        buttonGroup2.add(int2);
        int2.setText("Int");

        buttonGroup3.add(int3);
        int3.setText("Int");

        buttonGroup4.add(int4);
        int4.setText("Int");

        buttonGroup5.add(int5);
        int5.setText("Int");

        buttonGroup6.add(int6);
        int6.setText("Int");

        buttonGroup2.add(wis2);
        wis2.setText("Wis");

        buttonGroup3.add(wis3);
        wis3.setText("Wis");

        buttonGroup5.add(wis5);
        wis5.setText("Wis");

        buttonGroup4.add(wis4);
        wis4.setText("Wis");

        buttonGroup6.add(wis6);
        wis6.setText("Wis");

        buttonGroup2.add(cha2);
        cha2.setText("Cha");

        buttonGroup1.add(cha1);
        cha1.setText("Cha");

        buttonGroup3.add(cha3);
        cha3.setText("Cha");

        buttonGroup4.add(cha4);
        cha4.setText("Cha");

        buttonGroup6.add(cha6);
        cha6.setText("Cha");

        toBackgroundAlignmentPanel.setText("Next");
        toBackgroundAlignmentPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toBackgroundAlignmentPanelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout assignStatPanelLayout = new javax.swing.GroupLayout(assignStatPanel);
        assignStatPanel.setLayout(assignStatPanelLayout);
        assignStatPanelLayout.setHorizontalGroup(
            assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assignStatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(assignStatPanelLayout.createSequentialGroup()
                        .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(assignStat5)
                            .addComponent(assignStat6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(assignStatPanelLayout.createSequentialGroup()
                                .addComponent(str6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dex6))
                            .addGroup(assignStatPanelLayout.createSequentialGroup()
                                .addComponent(str5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dex5)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(assignStatPanelLayout.createSequentialGroup()
                                .addComponent(con6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(int6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wis6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cha6))
                            .addGroup(assignStatPanelLayout.createSequentialGroup()
                                .addComponent(con5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(int5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wis5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cha5))))
                    .addGroup(assignStatPanelLayout.createSequentialGroup()
                        .addComponent(assignStat4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(str4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dex4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(con4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(int4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wis4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cha4))
                    .addGroup(assignStatPanelLayout.createSequentialGroup()
                        .addComponent(assignStat3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(str3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dex3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(con3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(int3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wis3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cha3))
                    .addGroup(assignStatPanelLayout.createSequentialGroup()
                        .addComponent(assignStat1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(str1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dex1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(con1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(int1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wis1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cha1))
                    .addGroup(assignStatPanelLayout.createSequentialGroup()
                        .addComponent(assignStat2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(str2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dex2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(con2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(int2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wis2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cha2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, assignStatPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(toBackgroundAlignmentPanel)
                .addGap(15, 15, 15))
        );
        assignStatPanelLayout.setVerticalGroup(
            assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assignStatPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignStat1)
                    .addComponent(str1)
                    .addComponent(dex1)
                    .addComponent(con1)
                    .addComponent(int1)
                    .addComponent(wis1)
                    .addComponent(cha1))
                .addGap(18, 18, 18)
                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignStat2)
                    .addComponent(str2)
                    .addComponent(dex2)
                    .addComponent(con2)
                    .addComponent(int2)
                    .addComponent(wis2)
                    .addComponent(cha2))
                .addGap(18, 18, 18)
                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignStat3)
                    .addComponent(str3)
                    .addComponent(dex3)
                    .addComponent(con3)
                    .addComponent(int3)
                    .addComponent(wis3)
                    .addComponent(cha3))
                .addGap(18, 18, 18)
                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignStat4)
                    .addComponent(str4)
                    .addComponent(dex4)
                    .addComponent(con4)
                    .addComponent(int4)
                    .addComponent(wis4)
                    .addComponent(cha4))
                .addGap(18, 18, 18)
                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignStat5)
                    .addComponent(str5)
                    .addComponent(dex5)
                    .addComponent(con5)
                    .addComponent(int5)
                    .addComponent(wis5)
                    .addComponent(cha5))
                .addGap(18, 18, 18)
                .addGroup(assignStatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignStat6)
                    .addComponent(str6)
                    .addComponent(dex6)
                    .addComponent(con6)
                    .addComponent(int6)
                    .addComponent(wis6)
                    .addComponent(cha6))
                .addGap(18, 18, 18)
                .addComponent(toBackgroundAlignmentPanel)
                .addGap(19, 19, 19))
        );

        mainPanel.add(assignStatPanel, "assignStatPanel");

        jLabel5.setText("Choose alignment:");

        jLabel6.setText("Choose Background:");

        buttonGroup7.add(neutralGoodRadio);
        neutralGoodRadio.setText("Neutral Good");

        buttonGroup7.add(chaoticGoodRadio);
        chaoticGoodRadio.setText("Chaotic Good");

        buttonGroup7.add(lawfulNeutralRadio);
        lawfulNeutralRadio.setText("Lawful Neutral");

        buttonGroup7.add(trueNeutralRadio);
        trueNeutralRadio.setText("True Neutral");

        buttonGroup7.add(chaoticNeutralRadio);
        chaoticNeutralRadio.setText("Chaotic Neutral");

        buttonGroup7.add(lawfulEvilRadio);
        lawfulEvilRadio.setText("Lawful Evil");

        buttonGroup7.add(chaoticEvilRadio);
        chaoticEvilRadio.setText("Chaotic Evil");

        buttonGroup7.add(lawfulGoodRadio);
        lawfulGoodRadio.setText("Lawful Good");

        buttonGroup7.add(neutralEvilRadio);
        neutralEvilRadio.setText("Neutral Evil");

        backgroundList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Acolyte", "Charlatan", "Criminal", "Entertainer", "Folk Hero", "Guild Artisan", "Hermit", "Noble", "Outlander", "Sage", "Sailor", "Soldier", "Urchin", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        backgroundScrollPanel.setViewportView(backgroundList);

        toSkillsPanelButton.setText("Next");
        toSkillsPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toSkillsPanelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout backgroundAlignmentPanelLayout = new javax.swing.GroupLayout(backgroundAlignmentPanel);
        backgroundAlignmentPanel.setLayout(backgroundAlignmentPanelLayout);
        backgroundAlignmentPanelLayout.setHorizontalGroup(
            backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundAlignmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(lawfulEvilRadio)
                    .addComponent(trueNeutralRadio)
                    .addComponent(chaoticNeutralRadio)
                    .addComponent(neutralEvilRadio)
                    .addComponent(chaoticEvilRadio)
                    .addComponent(lawfulGoodRadio)
                    .addComponent(neutralGoodRadio)
                    .addComponent(chaoticGoodRadio)
                    .addComponent(lawfulNeutralRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 220, Short.MAX_VALUE)
                .addGroup(backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundAlignmentPanelLayout.createSequentialGroup()
                        .addGroup(backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(backgroundScrollPanel))
                        .addGap(56, 56, 56))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundAlignmentPanelLayout.createSequentialGroup()
                        .addComponent(toSkillsPanelButton)
                        .addGap(74, 74, 74))))
        );
        backgroundAlignmentPanelLayout.setVerticalGroup(
            backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundAlignmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(backgroundAlignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(backgroundAlignmentPanelLayout.createSequentialGroup()
                        .addComponent(lawfulGoodRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(neutralGoodRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chaoticGoodRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lawfulNeutralRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trueNeutralRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chaoticNeutralRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lawfulEvilRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(neutralEvilRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chaoticEvilRadio)
                        .addContainerGap())
                    .addGroup(backgroundAlignmentPanelLayout.createSequentialGroup()
                        .addComponent(backgroundScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toSkillsPanelButton)
                        .addGap(10, 10, 10))))
        );

        mainPanel.add(backgroundAlignmentPanel, "backgroundAlignmentPanel");

        jLabel7.setText("Choose Proficiencies:");

        acrobaticsCheck.setText("Acrobatics");

        arcanaCheck.setText("Arcana");

        historyCheck.setText("History");

        animalHandlingCheck.setText("Animal Handling");

        athleticsCheck.setText("Athletics");

        deceptionCheck.setText("Deception");

        insightCheck.setText("Insight");

        intimidationCheck.setText("Intimidation");

        investigationCheck.setText("Investigation");

        medicineCheck.setText("Medicine");

        natureCheck.setText("Nature");

        perceptionCheck.setText("Perception");

        performanceCheck.setText("Performance");

        persuasionCheck.setText("Persuasion");

        religionCheck.setText("Religion");

        sleightOfHandCheck.setText("Sleight of Hand");

        stealthCheck.setText("Stealth");

        survivalCheck.setText("Survival");

        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("Skills in RED are proficiencies given by your background");

        jLabel9.setText("Select this many:");

        profAmountLabel.setText("jLabel10");

        toLanguagesPanel.setText("Next");
        toLanguagesPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toLanguagesPanelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout skillsPanelLayout = new javax.swing.GroupLayout(skillsPanel);
        skillsPanel.setLayout(skillsPanelLayout);
        skillsPanelLayout.setHorizontalGroup(
            skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(skillsPanelLayout.createSequentialGroup()
                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(skillsPanelLayout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(jLabel7))
                    .addGroup(skillsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(deceptionCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(natureCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stealthCheck))
                    .addGroup(skillsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(athleticsCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(medicineCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sleightOfHandCheck))
                    .addGroup(skillsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(arcanaCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(investigationCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(religionCheck))
                    .addGroup(skillsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(animalHandlingCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(intimidationCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(persuasionCheck))
                    .addGroup(skillsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(historyCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(perceptionCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(survivalCheck))
                    .addGroup(skillsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8)))
                .addContainerGap(177, Short.MAX_VALUE))
            .addGroup(skillsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(acrobaticsCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(insightCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(performanceCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(profAmountLabel)
                .addGap(32, 32, 32))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, skillsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(toLanguagesPanel)
                .addGap(78, 78, 78))
        );
        skillsPanelLayout.setVerticalGroup(
            skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(skillsPanelLayout.createSequentialGroup()
                .addComponent(jLabel7)
                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(skillsPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(acrobaticsCheck)
                            .addComponent(insightCheck)
                            .addComponent(performanceCheck)))
                    .addGroup(skillsPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(profAmountLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(animalHandlingCheck)
                    .addComponent(intimidationCheck)
                    .addComponent(persuasionCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(arcanaCheck)
                    .addComponent(investigationCheck)
                    .addComponent(religionCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(athleticsCheck)
                    .addComponent(medicineCheck)
                    .addComponent(sleightOfHandCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deceptionCheck)
                    .addComponent(natureCheck)
                    .addComponent(stealthCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(skillsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(historyCheck)
                    .addComponent(perceptionCheck)
                    .addComponent(survivalCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(toLanguagesPanel)
                .addGap(52, 52, 52))
        );

        mainPanel.add(skillsPanel, "skillsPanel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "raceClassPanel");
        //create Character object
        this.newCharacter = new Character();
    }//GEN-LAST:event_startButtonActionPerformed

    private void toStatPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toStatPanelButtonActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "statPanel");
        //set race and class strings in Character object
        this.newCharacter.setRace(this.raceList.getSelectedValue().toString());
        this.newCharacter.setClass(this.classList.getSelectedValue().toString());
    }//GEN-LAST:event_toStatPanelButtonActionPerformed

    private void rollStatsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollStatsButtonActionPerformed
        // TODO add your handling code here:
        //roll 6 stat values and save to Character object
        int firstStat = StatRoller.rollStat();
        this.newCharacter.setStatRolls(0, firstStat);
        this.firstStatLabel.setText("" + firstStat);
        
        int secondStat = StatRoller.rollStat();
        this.newCharacter.setStatRolls(1, secondStat);
        this.secondStatLabel.setText("" + secondStat);
        
        int thirdStat = StatRoller.rollStat();
        this.newCharacter.setStatRolls(2, thirdStat);
        this.thirdStatLabel.setText("" + thirdStat);
        
        int fourthStat = StatRoller.rollStat();
        this.newCharacter.setStatRolls(3, fourthStat);
        this.fourthStatLabel.setText("" + fourthStat);
        
        int fifthStat = StatRoller.rollStat();
        this.newCharacter.setStatRolls(4, fifthStat);
        this.fifthStatLabel.setText("" + fifthStat);
        
        int sixthStat = StatRoller.rollStat();
        this.newCharacter.setStatRolls(5, sixthStat);
        this.sixthStatLabel.setText("" + sixthStat);
    }//GEN-LAST:event_rollStatsButtonActionPerformed

    private void toAssignStatPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toAssignStatPanelActionPerformed
        // TODO add your handling code here:
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "assignStatPanel");
        this.assignStat1.setText("" + this.newCharacter.getThisStatRoll(0));
        this.assignStat2.setText("" + this.newCharacter.getThisStatRoll(1));
        this.assignStat3.setText("" + this.newCharacter.getThisStatRoll(2));
        this.assignStat4.setText("" + this.newCharacter.getThisStatRoll(3));
        this.assignStat5.setText("" + this.newCharacter.getThisStatRoll(4));
        this.assignStat6.setText("" + this.newCharacter.getThisStatRoll(5));
    }//GEN-LAST:event_toAssignStatPanelActionPerformed

    private void toBackgroundAlignmentPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toBackgroundAlignmentPanelActionPerformed
        // TODO add your handling code here:
        //TRUE IF CAN'T CONTINUE B/C OF USER MISTAKE
        boolean error1 = false;
        boolean error2 = false;
        //used to count occurences
        int strnum = 0;
        int dexnum = 0;
        int connum = 0;
        int intnum = 0;
        int wisnum = 0;
        int chanum = 0;
        
        //arrays of buttons
        JRadioButton[] strarray = new JRadioButton[6];
        JRadioButton[] dexarray = new JRadioButton[6];
        JRadioButton[] conarray = new JRadioButton[6];
        JRadioButton[] intarray = new JRadioButton[6];
        JRadioButton[] wisarray = new JRadioButton[6];
        JRadioButton[] chaarray = new JRadioButton[6];
        
        //populate radiobutton arrays with buttons
        strarray[0] = this.str1;
        strarray[1] = this.str2;
        strarray[2] = this.str3;
        strarray[3] = this.str4;
        strarray[4] = this.str5;
        strarray[5] = this.str6;
        
        dexarray[0] = this.dex1;
        dexarray[1] = this.dex2;
        dexarray[2] = this.dex3;
        dexarray[3] = this.dex4;
        dexarray[4] = this.dex5;
        dexarray[5] = this.dex6;
        
        conarray[0] = this.con1;
        conarray[1] = this.con2;
        conarray[2] = this.con3;
        conarray[3] = this.con4;
        conarray[4] = this.con5;
        conarray[5] = this.con6;
        
        intarray[0] = this.int1;
        intarray[1] = this.int2;
        intarray[2] = this.int3;
        intarray[3] = this.int4;
        intarray[4] = this.int5;
        intarray[5] = this.int6;
        
        wisarray[0] = this.wis1;
        wisarray[1] = this.wis2;
        wisarray[2] = this.wis3;
        wisarray[3] = this.wis4;
        wisarray[4] = this.wis5;
        wisarray[5] = this.wis6;
        
        chaarray[0] = this.cha1;
        chaarray[1] = this.cha2;
        chaarray[2] = this.cha3;
        chaarray[3] = this.cha4;
        chaarray[4] = this.cha5;
        chaarray[5] = this.cha6;
        
        for(int i=0;i<6;i++)
        {
            if(strarray[i].isSelected())
                strnum++;
        }
        for(int i=0;i<6;i++)
        {
            if(dexarray[i].isSelected())
                dexnum++;
        }
        for(int i=0;i<6;i++)
        {
            if(conarray[i].isSelected())
                connum++;
        }
        for(int i=0;i<6;i++)
        {
            if(intarray[i].isSelected())
                intnum++;
        }
        for(int i=0;i<6;i++)
        {
            if(wisarray[i].isSelected())
                wisnum++;
        }
        for(int i=0;i<6;i++)
        {
            if(chaarray[i].isSelected())
                chanum++;
        }
        //checks if more than one instance of stat assignment, if so makes dialog 
        if(strnum > 1)
            error1 = true;
        if(dexnum > 1)
            error1 = true;
        if(connum > 1)
            error1 = true;
        if(intnum > 1)
            error1 = true;
        if(wisnum > 1)
            error1 = true;
        if(chanum > 1)
            error1 = true;
        
        //checks if not all fields have been accounted for, if so makes dialog
        if(strnum == 0)
            error2 = true;
        if(dexnum == 0)
            error2 = true;
        if(connum == 0)
            error2 = true;
        if(intnum == 0)
            error2 = true;
        if(wisnum == 0)
            error2 = true;
        if(chanum == 0)
            error2 = true;
        
        //shows dialog message if a user error has been made
        if(error1)
        {
            JOptionPane.showMessageDialog(null, "Only one value can be assigned to a stat");
        }
        else if(error2)
        {
            JOptionPane.showMessageDialog(null, "Each stat must have a value assigned to it.");
        }
        else
        {
            //the following saves values in character object
            String group1String = "";
            String group2String = "";
            String group3String = "";
            String group4String = "";
            String group5String = "";
            String group6String = "";
            
            Enumeration<AbstractButton> buttons1 = buttonGroup1.getElements();
            while(buttons1.hasMoreElements())
            {
                AbstractButton button = buttons1.nextElement();
                if(button.isSelected())
                    group1String = button.getText();
            }
            
            Enumeration<AbstractButton> buttons2 = buttonGroup2.getElements();
            while(buttons2.hasMoreElements())
            {
                AbstractButton button = buttons2.nextElement();
                if(button.isSelected())
                    group2String = button.getText();
            }
            
            Enumeration<AbstractButton> buttons3 = buttonGroup3.getElements();
            while(buttons3.hasMoreElements())
            {
                AbstractButton button = buttons3.nextElement();
                if(button.isSelected())
                    group3String = button.getText();
            }
            
            Enumeration<AbstractButton> buttons4 = buttonGroup4.getElements();
            while(buttons4.hasMoreElements())
            {
                AbstractButton button = buttons4.nextElement();
                if(button.isSelected())
                    group4String = button.getText();
            }
            
            Enumeration<AbstractButton> buttons5 = buttonGroup5.getElements();
            while(buttons5.hasMoreElements())
            {
                AbstractButton button = buttons5.nextElement();
                if(button.isSelected())
                    group5String = button.getText();
            }
            
            Enumeration<AbstractButton> buttons6 = buttonGroup6.getElements();
            while(buttons6.hasMoreElements())
            {
                AbstractButton button = buttons6.nextElement();
                if(button.isSelected())
                    group6String = button.getText();
            }
            
            String[] selections = new String[6];
            selections[0] = group1String;
            selections[1] = group2String;
            selections[2] = group3String;
            selections[3] = group4String;
            selections[4] = group5String;
            selections[5] = group6String;
            
            int[] values = new int[6];
            values[0] = Integer.parseInt(assignStat1.getText());
            values[1] = Integer.parseInt(assignStat2.getText());
            values[2] = Integer.parseInt(assignStat3.getText());
            values[3] = Integer.parseInt(assignStat4.getText());
            values[4] = Integer.parseInt(assignStat5.getText());
            values[5] = Integer.parseInt(assignStat6.getText());
            
            for(int i=0;i<6;i++)
            {
                String selection = selections[i];
                if(selection.equals("Str"))
                    this.newCharacter.setStrength(values[i]);
                else if(selection.equals("Dex"))
                    this.newCharacter.setDexterity(values[i]);
                else if(selection.equals("Con"))
                    this.newCharacter.setConstitution(values[i]);
                else if(selection.equals("Int"))
                    this.newCharacter.setIntelligence(values[i]);
                else if(selection.equals("Wis"))
                    this.newCharacter.setWisdom(values[i]);
                else if(selection.equals("Cha"))
                    this.newCharacter.setCharisma(values[i]);
            }
            //adjust stats based on race
            //LEFT OFF HERE ====================================================
            //sets stat mod values
            this.newCharacter.setStrMod(StatRoller.getStatMod(this.newCharacter.getStrength()));
            this.newCharacter.setDexMod(StatRoller.getStatMod(this.newCharacter.getDexterity()));
            this.newCharacter.setConMod(StatRoller.getStatMod(this.newCharacter.getConstitution()));
            this.newCharacter.setIntMod(StatRoller.getStatMod(this.newCharacter.getIntelligence()));
            this.newCharacter.setWisMod(StatRoller.getStatMod(this.newCharacter.getWisdom()));
            this.newCharacter.setChaMod(StatRoller.getStatMod(this.newCharacter.getCharisma()));
            
            CardLayout card = (CardLayout)mainPanel.getLayout();
            card.show(mainPanel, "backgroundAlignmentPanel");
            
        }
    }//GEN-LAST:event_toBackgroundAlignmentPanelActionPerformed

    private void toSkillsPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toSkillsPanelButtonActionPerformed
        
        String align = "";
        Enumeration<AbstractButton> buttons7 = buttonGroup7.getElements();
            while(buttons7.hasMoreElements())
            {
                AbstractButton button = buttons7.nextElement();
                if(button.isSelected())
                    align = button.getText();
            }
        if(this.backgroundList.getSelectedValue() == null)
            JOptionPane.showMessageDialog(null, "Must choose a background.");
        else if(align.equals(""))
            JOptionPane.showMessageDialog(null, "Must choose an alignment.");
        else
        {
            this.newCharacter.setBackground(this.backgroundList.getSelectedValue().toString());
            this.newCharacter.setAlignment(align);
            
            //configure next panel to reflect past choices
            Color color = new Color(255,0,0);
            String bg = this.newCharacter.getBackground();
            String alignment = this.newCharacter.getAlignment();
            
            
            
            //disable all checkboxes
            this.acrobaticsCheck.setEnabled(false);
            this.animalHandlingCheck.setEnabled(false);
            this.arcanaCheck.setEnabled(false);
            this.athleticsCheck.setEnabled(false);
            this.deceptionCheck.setEnabled(false);
            this.historyCheck.setEnabled(false);
            this.insightCheck.setEnabled(false);
            this.intimidationCheck.setEnabled(false);
            this.investigationCheck.setEnabled(false);
            this.medicineCheck.setEnabled(false);
            this.natureCheck.setEnabled(false);
            this.perceptionCheck.setEnabled(false);
            this.performanceCheck.setEnabled(false);
            this.persuasionCheck.setEnabled(false);
            this.religionCheck.setEnabled(false);
            this.sleightOfHandCheck.setEnabled(false);
            this.stealthCheck.setEnabled(false);
            this.survivalCheck.setEnabled(false);
          
            //enable those buttons allowed by selected class
            if(this.newCharacter.getPlayerClass().equals("Barbarian"))
            {
                this.animalHandlingCheck.setEnabled(true);
                this.athleticsCheck.setEnabled(true);
                this.intimidationCheck.setEnabled(true);
                this.natureCheck.setEnabled(true);
                this.perceptionCheck.setEnabled(true);
                this.survivalCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
            }
            if(this.newCharacter.getPlayerClass().equals("Bard"))
            {
                this.acrobaticsCheck.setEnabled(true);
                this.animalHandlingCheck.setEnabled(true);
                this.arcanaCheck.setEnabled(true);
                this.athleticsCheck.setEnabled(true);
                this.deceptionCheck.setEnabled(true);
                this.historyCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.intimidationCheck.setEnabled(true);
                this.investigationCheck.setEnabled(true);
                this.medicineCheck.setEnabled(true);
                this.natureCheck.setEnabled(true);
                this.perceptionCheck.setEnabled(true);
                this.performanceCheck.setEnabled(true);
                this.persuasionCheck.setEnabled(true);
                this.religionCheck.setEnabled(true);
                this.sleightOfHandCheck.setEnabled(true);
                this.stealthCheck.setEnabled(true);
                this.survivalCheck.setEnabled(true);
                this.newCharacter.setProfAmount(3);
            }
            if(this.newCharacter.getPlayerClass().equals("Cleric"))
            {
                
                this.historyCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.medicineCheck.setEnabled(true);
                this.persuasionCheck.setEnabled(true);
                this.religionCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
            }
            if(this.newCharacter.getPlayerClass().equals("Druid"))
            {
                
                this.animalHandlingCheck.setEnabled(true);
                this.arcanaCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.medicineCheck.setEnabled(true);
                this.natureCheck.setEnabled(true);
                this.perceptionCheck.setEnabled(true);
                this.religionCheck.setEnabled(true);
                this.survivalCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
            }
            if(this.newCharacter.getPlayerClass().equals("Fighter"))
            {
                this.acrobaticsCheck.setEnabled(true);
                this.animalHandlingCheck.setEnabled(true);
                this.athleticsCheck.setEnabled(true);
                this.historyCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.intimidationCheck.setEnabled(true);
                this.perceptionCheck.setEnabled(true);
                this.survivalCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
            }
            if(this.newCharacter.getPlayerClass().equals("Monk"))
            {
                this.acrobaticsCheck.setEnabled(true); 
                this.athleticsCheck.setEnabled(true);
                this.historyCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.religionCheck.setEnabled(true);
                this.stealthCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
            }
            if(this.newCharacter.getPlayerClass().equals("Paladin"))
            {
                
                this.athleticsCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.intimidationCheck.setEnabled(true);
                this.medicineCheck.setEnabled(true);
                this.persuasionCheck.setEnabled(true);
                this.religionCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
            }
            if(this.newCharacter.getPlayerClass().equals("Ranger"))
            {
                
                this.animalHandlingCheck.setEnabled(true);
                this.athleticsCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.investigationCheck.setEnabled(true);
                this.natureCheck.setEnabled(true);
                this.perceptionCheck.setEnabled(true);
                this.stealthCheck.setEnabled(true);
                this.survivalCheck.setEnabled(true);
                this.newCharacter.setProfAmount(3);
            }
            if(this.newCharacter.getPlayerClass().equals("Rogue"))
            {
                this.acrobaticsCheck.setEnabled(true);
                this.athleticsCheck.setEnabled(true);
                this.deceptionCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.intimidationCheck.setEnabled(true);
                this.investigationCheck.setEnabled(true);
                this.perceptionCheck.setEnabled(true);
                this.performanceCheck.setEnabled(true);
                this.persuasionCheck.setEnabled(true);
                this.sleightOfHandCheck.setEnabled(true);
                this.stealthCheck.setEnabled(true);
                this.newCharacter.setProfAmount(4);
            }
            if(this.newCharacter.getPlayerClass().equals("Sorcerer"))
            {
                this.arcanaCheck.setEnabled(true);
                this.deceptionCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.intimidationCheck.setEnabled(true);
                this.persuasionCheck.setEnabled(true);
                this.religionCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
            }
            if(this.newCharacter.getPlayerClass().equals("Warlock"))
            {
                this.arcanaCheck.setEnabled(true);
                this.deceptionCheck.setEnabled(true);
                this.historyCheck.setEnabled(true);
                this.intimidationCheck.setEnabled(true);
                this.investigationCheck.setEnabled(true);
                this.natureCheck.setEnabled(true);
                this.religionCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
            }
            if(this.newCharacter.getPlayerClass().equals("Wizard"))
            {
                this.arcanaCheck.setEnabled(true);
                this.historyCheck.setEnabled(true);
                this.insightCheck.setEnabled(true);
                this.investigationCheck.setEnabled(true);
                this.medicineCheck.setEnabled(true);
                this.religionCheck.setEnabled(true);
                this.newCharacter.setProfAmount(2);
            }
            
            
            //disable and turn red those proficiencies given by background
            if(bg.equals("Acolyte"))
            {
                this.insightCheck.setForeground(color);
                this.insightCheck.setSelected(true);
                this.insightCheck.setEnabled(false);
                this.religionCheck.setForeground(color);
                this.religionCheck.setSelected(true);
                this.religionCheck.setEnabled(false);
            }
            if(bg.equals("Charlatan"))
            {
                this.deceptionCheck.setForeground(color);
                this.deceptionCheck.setSelected(true);
                this.deceptionCheck.setEnabled(false);
                this.sleightOfHandCheck.setForeground(color);
                this.sleightOfHandCheck.setSelected(true);
                this.sleightOfHandCheck.setEnabled(false);
            }
            if(bg.equals("Criminal"))
            {
                this.deceptionCheck.setForeground(color);
                this.deceptionCheck.setSelected(true);
                this.deceptionCheck.setEnabled(false);
                this.stealthCheck.setForeground(color);
                this.stealthCheck.setSelected(true);
                this.stealthCheck.setEnabled(false);
            }
            if(bg.equals("Entertainer"))
            {
                this.acrobaticsCheck.setForeground(color);
                this.acrobaticsCheck.setSelected(true);
                this.acrobaticsCheck.setEnabled(false);
                this.performanceCheck.setForeground(color);
                this.performanceCheck.setSelected(true);
                this.performanceCheck.setEnabled(false);
            }
            if(bg.equals("Folk Hero"))
            {
                this.animalHandlingCheck.setForeground(color);
                this.animalHandlingCheck.setSelected(true);
                this.animalHandlingCheck.setEnabled(false);
                this.survivalCheck.setForeground(color);
                this.survivalCheck.setSelected(true);
                this.survivalCheck.setEnabled(false);
            }
            if(bg.equals("Guild Artisan"))
            {
                this.insightCheck.setForeground(color);
                this.insightCheck.setSelected(true);
                this.insightCheck.setEnabled(false);
                this.persuasionCheck.setForeground(color);
                this.persuasionCheck.setSelected(true);
                this.persuasionCheck.setEnabled(false);
            }
            if(bg.equals("Hermit"))
            {
                this.medicineCheck.setForeground(color);
                this.medicineCheck.setSelected(true);
                this.medicineCheck.setEnabled(false);
                this.religionCheck.setForeground(color);
                this.religionCheck.setSelected(true);
                this.religionCheck.setEnabled(false);
            }
            if(bg.equals("Noble"))
            {
                this.historyCheck.setForeground(color);
                this.historyCheck.setSelected(true);
                this.historyCheck.setEnabled(false);
                this.persuasionCheck.setForeground(color);
                this.persuasionCheck.setSelected(true);
                this.persuasionCheck.setEnabled(false);
            }
            if(bg.equals("Outlander"))
            {
                this.athleticsCheck.setForeground(color);
                this.athleticsCheck.setSelected(true);
                this.athleticsCheck.setEnabled(false);
                this.survivalCheck.setForeground(color);
                this.survivalCheck.setSelected(true);
                this.survivalCheck.setEnabled(false);
            }
            if(bg.equals("Sage"))
            {
                this.arcanaCheck.setForeground(color);
                this.arcanaCheck.setSelected(true);
                this.arcanaCheck.setEnabled(false);
                this.historyCheck.setForeground(color);
                this.historyCheck.setSelected(true);
                this.historyCheck.setEnabled(false);
            }
            if(bg.equals("Sailor"))
            {
                this.athleticsCheck.setForeground(color);
                this.athleticsCheck.setSelected(true);
                this.athleticsCheck.setEnabled(false);
                this.perceptionCheck.setForeground(color);
                this.perceptionCheck.setSelected(true);
                this.perceptionCheck.setEnabled(false);
            }
            if(bg.equals("Soldier"))
            {
                this.athleticsCheck.setForeground(color);
                this.athleticsCheck.setSelected(true);
                this.athleticsCheck.setEnabled(false);
                this.intimidationCheck.setForeground(color);
                this.intimidationCheck.setSelected(true);
                this.intimidationCheck.setEnabled(false);
            }
            if(bg.equals("Urchin"))
            {
                this.sleightOfHandCheck.setForeground(color);
                this.sleightOfHandCheck.setSelected(true);
                this.sleightOfHandCheck.setEnabled(false);
                this.stealthCheck.setForeground(color);
                this.stealthCheck.setSelected(true);
                this.stealthCheck.setEnabled(false);
            }
            this.profAmountLabel.setText(""+this.newCharacter.getProfAmount());
            
            //continue to next panel
            CardLayout card = (CardLayout)mainPanel.getLayout();
            card.show(mainPanel, "skillsPanel");
        }
    }//GEN-LAST:event_toSkillsPanelButtonActionPerformed

    private void toLanguagesPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toLanguagesPanelActionPerformed
        // TODO add your handling code here:
        //CHECK IF # PROFS SELECTED IS CORRECT=====================
        int amountChecked = 0;
        if(this.acrobaticsCheck.isSelected())
            amountChecked++;
        if(this.animalHandlingCheck.isSelected())
            amountChecked++;
        if(this.arcanaCheck.isSelected())
            amountChecked++;
        if(this.athleticsCheck.isSelected())
            amountChecked++;
        if(this.deceptionCheck.isSelected())
            amountChecked++;
        if(this.historyCheck.isSelected())
            amountChecked++;
        if(this.insightCheck.isSelected())
            amountChecked++;
        if(this.intimidationCheck.isSelected())
            amountChecked++;
        if(this.investigationCheck.isSelected())
            amountChecked++;
        if(this.medicineCheck.isSelected())
            amountChecked++;
        if(this.natureCheck.isSelected())
            amountChecked++;
        if(this.perceptionCheck.isSelected())
            amountChecked++;
        if(this.performanceCheck.isSelected())
            amountChecked++;
        if(this.persuasionCheck.isSelected())
            amountChecked++;
        if(this.religionCheck.isSelected())
            amountChecked++;
        if(this.sleightOfHandCheck.isSelected())
            amountChecked++;
        if(this.stealthCheck.isSelected())
            amountChecked++;
        if(this.survivalCheck.isSelected())
            amountChecked++;
        
        //account for 2 proficiencies given by background
        amountChecked = amountChecked - 2;
        
        if(amountChecked > this.newCharacter.getProfAmount())
        {
            JOptionPane.showMessageDialog(null, "Too many proficiencies checked!");
        }
        else if(amountChecked < this.newCharacter.getProfAmount())
        {
            int amountLeftToCheck = this.newCharacter.getProfAmount() - amountChecked;
            JOptionPane.showMessageDialog(null, "Must select " + amountLeftToCheck + " more before continuing");
        }
        else
        {
            JCheckBox[] checkBoxes = new JCheckBox[] {this.acrobaticsCheck,this.animalHandlingCheck,this.arcanaCheck,
                this.athleticsCheck,this.deceptionCheck,this.historyCheck,
                this.insightCheck,this.intimidationCheck,this.investigationCheck,
                this.medicineCheck,this.natureCheck,this.perceptionCheck,
                this.performanceCheck,this.persuasionCheck,this.religionCheck,
                this.sleightOfHandCheck,this.stealthCheck,this.survivalCheck};
            
            for(int i=0;i<18;i++)
            {
                JCheckBox currentCheckBox = checkBoxes[i];
                if(currentCheckBox.isSelected())
                    this.newCharacter.setThisSkillProf(i, 1);       
            }
            //SAVE SKILLS ONE CHARACTER OBJECT ================================
            //MOVE ONTO LANGUAGES PANEL
        }
    }//GEN-LAST:event_toLanguagesPanelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CharacterCreatorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CharacterCreatorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CharacterCreatorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CharacterCreatorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CharacterCreatorUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox acrobaticsCheck;
    private javax.swing.JCheckBox animalHandlingCheck;
    private javax.swing.JCheckBox arcanaCheck;
    private javax.swing.JLabel assignStat1;
    private javax.swing.JLabel assignStat2;
    private javax.swing.JLabel assignStat3;
    private javax.swing.JLabel assignStat4;
    private javax.swing.JLabel assignStat5;
    private javax.swing.JLabel assignStat6;
    private javax.swing.JPanel assignStatPanel;
    private javax.swing.JCheckBox athleticsCheck;
    private javax.swing.JPanel backgroundAlignmentPanel;
    private javax.swing.JList backgroundList;
    private javax.swing.JScrollPane backgroundScrollPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.JRadioButton cha1;
    private javax.swing.JRadioButton cha2;
    private javax.swing.JRadioButton cha3;
    private javax.swing.JRadioButton cha4;
    private javax.swing.JRadioButton cha5;
    private javax.swing.JRadioButton cha6;
    private javax.swing.JRadioButton chaoticEvilRadio;
    private javax.swing.JRadioButton chaoticGoodRadio;
    private javax.swing.JRadioButton chaoticNeutralRadio;
    private javax.swing.JList classList;
    private javax.swing.JScrollPane classScrollPane;
    private javax.swing.JRadioButton con1;
    private javax.swing.JRadioButton con2;
    private javax.swing.JRadioButton con3;
    private javax.swing.JRadioButton con4;
    private javax.swing.JRadioButton con5;
    private javax.swing.JRadioButton con6;
    private javax.swing.JCheckBox deceptionCheck;
    private javax.swing.JRadioButton dex1;
    private javax.swing.JRadioButton dex2;
    private javax.swing.JRadioButton dex3;
    private javax.swing.JRadioButton dex4;
    private javax.swing.JRadioButton dex5;
    private javax.swing.JRadioButton dex6;
    private javax.swing.JLabel fifthStatLabel;
    private javax.swing.JLabel firstStatLabel;
    private javax.swing.JLabel fourthStatLabel;
    private javax.swing.JCheckBox historyCheck;
    private javax.swing.JCheckBox insightCheck;
    private javax.swing.JRadioButton int1;
    private javax.swing.JRadioButton int2;
    private javax.swing.JRadioButton int3;
    private javax.swing.JRadioButton int4;
    private javax.swing.JRadioButton int5;
    private javax.swing.JRadioButton int6;
    private javax.swing.JCheckBox intimidationCheck;
    private javax.swing.JCheckBox investigationCheck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton lawfulEvilRadio;
    private javax.swing.JRadioButton lawfulGoodRadio;
    private javax.swing.JRadioButton lawfulNeutralRadio;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JCheckBox medicineCheck;
    private javax.swing.JCheckBox natureCheck;
    private javax.swing.JRadioButton neutralEvilRadio;
    private javax.swing.JRadioButton neutralGoodRadio;
    private javax.swing.JCheckBox perceptionCheck;
    private javax.swing.JCheckBox performanceCheck;
    private javax.swing.JCheckBox persuasionCheck;
    private javax.swing.JLabel profAmountLabel;
    private javax.swing.JPanel raceClassPanel;
    private javax.swing.JList raceList;
    private javax.swing.JScrollPane raceScrollPane;
    private javax.swing.JCheckBox religionCheck;
    private javax.swing.JButton rollStatsButton;
    private javax.swing.JLabel secondStatLabel;
    private javax.swing.JLabel sixthStatLabel;
    private javax.swing.JPanel skillsPanel;
    private javax.swing.JCheckBox sleightOfHandCheck;
    private javax.swing.JButton startButton;
    private javax.swing.JPanel statPanel;
    private javax.swing.JCheckBox stealthCheck;
    private javax.swing.JRadioButton str1;
    private javax.swing.JRadioButton str2;
    private javax.swing.JRadioButton str3;
    private javax.swing.JRadioButton str4;
    private javax.swing.JRadioButton str5;
    private javax.swing.JRadioButton str6;
    private javax.swing.JCheckBox survivalCheck;
    private javax.swing.JLabel thirdStatLabel;
    private javax.swing.JButton toAssignStatPanel;
    private javax.swing.JButton toBackgroundAlignmentPanel;
    private javax.swing.JButton toLanguagesPanel;
    private javax.swing.JButton toSkillsPanelButton;
    private javax.swing.JButton toStatPanelButton;
    private javax.swing.JRadioButton trueNeutralRadio;
    private javax.swing.JRadioButton wis1;
    private javax.swing.JRadioButton wis2;
    private javax.swing.JRadioButton wis3;
    private javax.swing.JRadioButton wis4;
    private javax.swing.JRadioButton wis5;
    private javax.swing.JRadioButton wis6;
    // End of variables declaration//GEN-END:variables
}
